-- Create Database

CREATE DATABASE Case_Study1;
USE Case_Study1;

-- Import the table
SELECT *FROM fact;
SELECT *FROM LOCATION;
SELECT *FROM PRODUCT;

--1. Display the number of states present in the LocationTable.

SELECT COUNT(DISTINCT State) AS NO_OF_STATE FROM LOCATION;

--2. How many products are of regular type?

SELECT COUNT(DISTINCT Product) AS NO_OF_REGULAR_PRODUCT FROM PRODUCT WHERE Type='Regular';

--3. How much spending has been done on marketing of product ID 1?

SELECT SUM(Marketing) AS SPENDING_ON_MARKETING FROM FACT WHERE Productid='1';

--4. What is the minimum sales of a product?

SELECT MIN(Sales) AS MIN_SALES FROM FACT;

--5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS FROM FACT;

--6. Display the details of the product ID where product type is coffee.

SELECT * FROM FACT
JOIN
PRODUCT ON FACT.Productid=PRODUCT.Productid
WHERE Product_Type='Coffee';

--7. Display the details where total expenses are greater than 40.

SELECT *FROM FACT WHERE Total_Expenses >40;

--8. What is the average sales in area code 719?

SELECT AVG(Sales) AS AVG_SALES FROM FACT WHERE Area_code='719';

--9. Find out the total profit generated by Colorado state.

SELECT SUM(F.Profit) AS TOTAL_PROFIT,L.State FROM FACT F
JOIN LOCATION L
ON F.Area_Code=L.Area_Code
GROUP BY State
HAVING State='Colorado';

--10. Display the average inventory for each product ID.

SELECT Productid,AVG(Inventory) AS AVG_INVENTORY FROM FACT 
GROUP BY Productid
ORDER BY Productid;

--11. Display state in a sequential order in a LocationTable.

SELECT DISTINCT State FROM LOCATION 
ORDER BY State;

--12. Display the average budget margin where the average budget margin should be greater than 100.

SELECT AVG(Budget_Margin) AS AVG_BUG_Margin FROM FACT WHERE Budget_Margin >100;
--or
SELECT AVG(CAST("Budget_Margin" AS DECIMAL(10, 2))) as Avg_Budget_Margin
FROM Fact
WHERE CAST("Budget_Margin" AS DECIMAL(10, 2)) > 100;

--13. What is the total sales done on date 2010-01-01?

SELECT SUM(Sales) AS sALES FROM FACT WHERE Date='2010-01-01';

--14. Display the average total expense of each product ID on an individual date.

SELECT Productid,Date,AVG(Total_Expenses) AS AVG_T_Expen FROM FACT 
GROUP BY Productid,Date
ORDER BY Productid,Date;

--15. Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.

SELECT F.Productid,P.ProdUCT_TYPE,P.Product,F.Sales,F.Profit,L.State,L.Area_Code 
FROM FACT F
INNER JOIN PRODUCT P ON F.Productid=P.Productid
INNER JOIN LOCATION L ON F.Area_Code=L.Area_Code;

--16. Display the rank without any gap to show the sales wise rank.

SELECT F.*,
    DENSE_RANK() OVER (ORDER BY Sales DESC) as rank
FROM Fact F;

--17. Find the state wise profit and sales.

SELECT SUM(F.Profit) AS T_Profit,SUM(F.Sales) AS T_Sales,L.State 
FROM FACT F
JOIN LOCATION L ON F.Area_Code=L.Area_Code
GROUP BY State;

--18. Find the state wise profit and sales along with the product name.

SELECT SUM(F.Profit) AS T_Profit,SUM(F.Sales) AS T_Sales,L.State,P.Product 
FROM FACT F
JOIN LOCATION L ON F.Area_Code=L.Area_Code
JOIN PRODUCT P ON F.Productid=P.Productid
GROUP BY State,Product;

--19. If there is an increase in sales of 5%, calculate the increased sales.

CREATE FUNCTION INCREASE_S(@VAL FLOAT)
RETURNS FLOAT AS
BEGIN RETURN (@VAL*0.05) END
SELECT Sales,DBO.INCREASE_S(Sales)+Sales AS INCREASED_sales FROM FACT

--20. Find the maximum profit along with the product ID and product type.

SELECT F.ProductId,P.Product_Type,MAX(F.Profit) AS MAX_PROF FROM
FACT F
JOIN PRODUCT  P ON F.ProductId=P.ProductId
GROUP BY F.ProductId,Product_Type;

--21. Create a stored procedure to fetch the result according to the product type from ProductTable.CREATE PROCEDURE GetProductsByType @ProductType VARCHAR(50)
AS
BEGIN
    SELECT * FROM Product WHERE "Product_Type" = @ProductType;
END;
-- Execute the stored procedure with a sample value
-- EXEC GetProductsByType 'Coffee';--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

SELECT *,IIF(Total_Expenses<60,'PROFIT','LOSS') AS STAUS FROM FACT 

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.

SELECT Date,Productid

--24. Apply union and intersection operator on the tables which consist of attribute area code.

SELECT*FROM FACT
UNION 
SELECT *FROM LOCATION

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

CREATE FUNCTION TYPE_P(@TYPE VARCHAR(20))RETURNS TABLE AS RETURN SELECT *FROM PRODUCT WHERE Product_Type=@TYPESELECT *FROM TYPE_P('Coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

BEGIN TRANSACTION
 UPDATE PRODUCT SET Product_Type='Tea' WHERE Product_Type='Coffee' AND ProductId='1';
ROLLBACK TRANSACTION

--27. Display the date, product ID and sales where total expenses are between 100 to 200.

SELECT Date,Productid,Sales FROM FACT WHERE Total_Expenses BETWEEN 100 AND 200

--28. Delete the records in the ProductTable for regular type.

DELETE PRODUCT WHERE TYPE ='Regular'; 

--29. Display the ASCII value of the fifth character from the column Product.SELECT ASCII(SUBSTRING(Product,5,1)) AS ASCII_VAL FROM PRODUCT 